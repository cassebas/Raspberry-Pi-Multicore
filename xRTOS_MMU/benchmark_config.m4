changecom(/*,*/)dnl
#ifndef BENCHMARK_CONFIG_H
#define BENCHMARK_CONFIG_H
/**
 * This is an autogenerated header file, do NOT edit!
 * It is generated by the use of m4 macros.
 *
 * These are the benchmarks:
 * 0: mälardalen bsort 100
 * 1: mälardalen edn
 * 2: linear array access
 *
 * The BENCH_CONFIG definition prescribes the specific benchmarks running
 * on the specific cores. If only one benchmark runs on multiple cores, the
 * NR_OF_CORES definition says on how many cores the benchmark is run.
 */
divert(`-1')
/* Define forloop for iteration within m4 */
/* forloop(var, from, to, stmt) - simple version, taken from GNU manual */
define(`forloop', `pushdef(`$1', `$2')_forloop($@)popdef(`$1')')
define(`_forloop',
`$4`'ifelse($1, `$3', `', `define(`$1', incr($1))$0($@)')')
divert`'dnl
/* Default number of benchmarks is 3 (but can be altered on the m4-cmdline) */
define(nr_of_benchmarks, 3)dnl
define(bench_string_core_undef, `
#ifdef BENCH_STRING_CORE`$1'
#undef BENCH_STRING_CORE`$1'
#endif')dnl
define(bench_arg_core_undef, `
#ifdef BENCH_ARG_CORE`$1'
#undef BENCH_ARG_CORE`$1'
#endif')dnl
define(bench_config_core_undef, `
#ifdef BENCH_CONFIG_CORE`$1'
#undef BENCH_CONFIG_CORE`$1'
#endif')dnl
define(do_bench_core_undef, `
#ifdef DO_BENCH_CORE`$1'
#undef DO_BENCH_CORE`$1'
#endif')dnl
define(meta1, `forloop(`i', `0', `3', `$1(i)')')dnl
define(meta2, `forloop(`i', `0', `3', `forloop(`j', `1', nr_of_benchmarks, `$1(i`_'j)')')')dnl
dnl
/**
 * Benchmark name macros for lookup function
 */
define(bench_name1, malardalen_bsort100)dnl
define(bench_name2, malardalen_edn)dnl
define(bench_name3, linear_array_access)dnl
define(lookup_name, bench_name$1)dnl

define(bench_arg1, Array$1)dnl
define(bench_arg2)dnl
define(bench_arg3, mydata$1)dnl
define(lookup_arg, bench_arg$1($2))dnl

define(do_bench1, bsort100_BubbleSort(BENCH_ARG_CORE`$1');)dnl
define(do_bench2, edn_Calculate();)dnl
define(do_bench3, array_access_linear(BENCH_ARG_CORE`$1');)dnl
define(lookup_bench, do_bench$1($2))dnl
/**
 * Macro for generation of the defines that describe the
 * configuration of the cores and specific benchmarks running
 * on them.
 *  (e.g. BENCH_CONFIG_CORE0_2 => Core 0 runs 2nd benchmark)
 */
define(bench_config_core_def, `
#define BENCH_CONFIG_CORE`$1'_`'substr(config, $1, 1)')dnl
dnl
define(bench_string_core_def, `
#define BENCH_STRING_CORE`$1' "benchmark: lookup_name(substr(config, $1, 1))"')dnl
define(bench_string_core_empty_def, `
#define BENCH_STRING_CORE`$1' ""')dnl
dnl
define(bench_arg_core_def, `
#define BENCH_ARG_CORE`$1' lookup_arg(substr(config, $1, 1), eval($1+1))')dnl
define(bench_arg_core_empty_def, `
#define BENCH_ARG_CORE`$1' $2')dnl
dnl
define(do_bench_core_def, `
#define DO_BENCH_CORE`$1' lookup_bench(substr(config, `$1', 1), `$1')')dnl
define(do_bench_core_empty_def, `
#define DO_BENCH_CORE`$1' $2')dnl
dnl
define(meta3, `forloop(`i', `0', eval(len(config) - 1), `$1(i)')')dnl
define(meta4, `forloop(`i', len(config), 3, `$1(i)')')dnl
divert(0)dnl
dnl
meta1(`bench_string_core_undef')dnl
meta1(`bench_arg_core_undef')dnl
meta1(`do_bench_core_undef')dnl
meta2(`bench_config_core_undef')dnl
meta3(`bench_config_core_def')dnl
dnl
meta3(`bench_string_core_def')dnl
ifelse(len(config), 4, `', `meta4(`bench_string_core_empty_def')')dnl

meta3(`bench_arg_core_def')dnl
ifelse(len(config), 4, `', `meta4(`bench_arg_core_empty_def')')dnl

meta3(`do_bench_core_def')dnl
ifelse(len(config), 4, `', `meta4(`do_bench_core_empty_def')')

/* Default configuration of benchmarks is '123' (but can be altered on the m4-cmdline) */
define(config, `'123'')dnl
#ifdef CONFIG_STRING
#undef CONFIG_STRING
#endif
#define CONFIG_STRING "configuration: 'config'"dnl

define(nr_of_cores, 4)
#ifdef NR_OF_CORES
#undef NR_OF_CORES
#endif
#define NR_OF_CORES len(config)

#endif /* ~BENCHMARK_CONFIG_H */
